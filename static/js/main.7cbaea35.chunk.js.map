{"version":3,"sources":["logo.svg","App.js","Form-lista.js","serviceWorker.js","index.js"],"names":["module","exports","App","Controller","props","refreshParent","setState","state","valor","this","React","Component","Table","remove","e","console","dir","lista","splice","edit","target","alunos","map","aluno","index","nome","nota","className","onClick","Form","submit","push","ponto","log","preventDefault","changeName","value","changeScore","onSubmit","type","class","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,kKCyB5BC,I,4BCtBTC,E,kDACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAGPC,cAAgB,WACd,EAAKC,SAAS,KAHf,EAAKC,MAAQ,CAACC,OAAO,GAFL,E,qDAQf,OACE,6BAEE,kBAAC,EAAD,CAAMH,cAAeI,KAAKJ,gBAE1B,kBAAC,EAAD,W,GAdgBK,IAAMC,WAoBxBC,E,4MACJC,OAAS,SAACC,GACRC,QAAQC,IAAIF,GACZG,EAAMC,OAAOJ,EAAG,GAChB,EAAKR,SAAS,K,EAEhBa,KAAO,SAACL,GACNC,QAAQC,IAAIF,EAAEM,S,EAGjBC,OAAS,WACR,OAASJ,EAAMK,KAAI,SAACC,EAAOC,GAAR,OACjB,4BAAI,4BAAKD,EAAME,MAAU,4BAAKF,EAAMG,MAAU,4BAAKH,EAAMG,MAAM,EAAI,WAAa,YAAlC,IAA+C,4BAAQC,UAAU,iBAAiBC,QAAS,kBAAM,EAAKf,OAAOW,KAA9D,iB,uDAM/F,OAAO,2BAAOG,UAAU,SAAQ,oCAAa,sCAAe,yCAArD,QAA6ElB,KAAKY,c,GAlBvEX,IAAMC,WAuBpBkB,E,kDACJ,WAAYzB,GAAO,IAAD,8BAChB,cAAMA,IAIR0B,OAAS,SAAChB,GACRG,EAAMc,KAAK,CAACN,KAAM,EAAKlB,MAAMkB,KAAMC,KAAM,EAAKnB,MAAMyB,QACpDjB,QAAQkB,IAAIhB,GACZ,EAAKb,MAAMC,gBAEXS,EAAEoB,kBAVc,EAYlBC,WAAa,SAACrB,GACZ,EAAKR,SAAS,CAACmB,KAAMX,EAAEM,OAAOgB,SAbd,EAelBC,YAAc,SAACvB,GACbC,QAAQkB,IAAInB,EAAEM,OAAOgB,OACrB,EAAK9B,SAAS,CAAC0B,MAAOlB,EAAEM,OAAOgB,SAf/B,EAAK7B,MAAQ,CAACkB,KAAM,MAAOO,MAAO,GAFlB,E,qDAqBhB,OAEE,0BAAMM,SAAU7B,KAAKqB,QAEtB,6BACG,yBAAKH,UAAU,SACf,uCACA,2BAAOY,KAAK,OAAOC,MAAM,eAAeJ,MAAO3B,KAAKF,MAAMkB,KAAMgB,SAAUhC,KAAK0B,cAE/E,yBAAKR,UAAU,SACf,kDACA,2BAAOY,KAAK,SAAUC,MAAM,eAAeJ,MAAO3B,KAAKF,MAAMyB,MAAOS,SAAUhC,KAAK4B,cACnF,2BAAOG,MAAM,uBAAuBD,KAAK,SAASH,MAAM,kB,GAlC7C1B,IAAMC,WA4CnBM,EAAQ,CAAC,CAACQ,KAAM,SAAUC,KAAM,IAAK,CAACD,KAAM,SAAUC,KAAM,GAAI,CAACD,KAAM,QAASC,KAAM,IAE7EvB,IChFIuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.7cbaea35.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\n\r\n\r\nclass Controller extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {valor: true}\r\n  }\r\n   refreshParent = () => {\r\n     this.setState({})\r\n   }\r\n   render(){\r\n     return (\r\n       <div>\r\n       \r\n         <Form refreshParent={this.refreshParent}/>\r\n       \r\n         <Table/>\r\n       </div>\r\n     ) \r\n   }\r\n }\r\n \r\n class Table extends React.Component{\r\n   remove = (e) => {\r\n     console.dir(e)\r\n     lista.splice(e, 1)\r\n     this.setState({})\r\n   }\r\n   edit = (e) => {\r\n     console.dir(e.target)\r\n   }\r\n   \r\n  alunos = () => {\r\n   return ( lista.map((aluno, index) => (\r\n     <tr><td>{aluno.nome}</td><td>{aluno.nota}</td><td>{aluno.nota>=5 ? 'Aprovado' : 'Reprovado'} <button className=\"btn btn-danger\" onClick={() => this.remove(index)}>Remover</button>\r\n     </td></tr>\r\n   ))\r\n )\r\n  } \r\n render(){\r\n   return <table className=\"table\"><th>Nome</th><th>Pontos</th><th>Resultado</th>     {this.alunos()}</table> \r\n }\r\n   \r\n }\r\n \r\n class Form extends React.Component{\r\n   constructor(props){\r\n     super(props)\r\n     this.state = {nome: 'kkk', ponto: 5}\r\n   }\r\n   \r\n   submit = (e) => {\r\n     lista.push({nome: this.state.nome, nota: this.state.ponto})\r\n     console.log(lista)\r\n     this.props.refreshParent()\r\n     \r\n     e.preventDefault()\r\n   } \r\n   changeName = (e) => {\r\n     this.setState({nome: e.target.value})\r\n   }\r\n   changeScore = (e) => {\r\n     console.log(e.target.value)\r\n     this.setState({ponto: e.target.value})\r\n   }\r\n   \r\n   render(){\r\n     return (\r\n      \r\n       <form onSubmit={this.submit}>\r\n         \r\n      <div>\r\n         <div className=\"col-2\">\r\n         <label>Nome</label> \r\n         <input type=\"text\" class=\"form-control\" value={this.state.nome} onChange={this.changeName} />\r\n         </div>\r\n         <div className=\"col-2\">\r\n         <label>Pontuação</label> \r\n         <input type=\"number\"  class=\"form-control\" value={this.state.ponto} onChange={this.changeScore}/>\r\n         <input class=\"btn btn-primary my-2\" type=\"submit\" value=\"enviar\"/>\r\n         </div>\r\n         \r\n      </div>   \r\n       </form>\r\n     \r\n   )\r\n   }\r\n }\r\n \r\n const lista = [{nome: 'Wesley', nota: 10}, {nome: 'Wesley', nota: 8}, {nome: 'teste', nota: 4},]\r\n\r\n export default Controller;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Controller from './Form-lista';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Controller />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}